name: 'User management'
description: |-

  APIs for managing users
endpoints:
  -
    httpMethods:
      - POST
    uri: 'api/users/{id}/forceDestroy'
    metadata:
      groupName: 'User management'
      groupDescription: |-

        APIs for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Force Destroy user'
      description: 'This endpoint will permanently delete a user'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: vel
        type: string
        custom: []
    cleanUrlParameters:
      id: vel
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": "success",
            "message": "User successfully deleted"
          }
        headers: []
        description: Success
        custom: []
      -
        status: 404
        content: |
          {
            "message": "No query results for model [App\\Models\\ModelName] 1"
          }
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/users/{id}/restore'
    metadata:
      groupName: 'User management'
      groupDescription: |-

        APIs for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Restore user'
      description: 'This endpoint will restore a user'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: ducimus
        type: string
        custom: []
    cleanUrlParameters:
      id: ducimus
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": "success",
            "message": "User successfully restored"
          }
        headers: []
        description: Success
        custom: []
      -
        status: 404
        content: |
          {
            "message": "No query results for model [App\\Models\\ModelName] 1"
          }
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/users
    metadata:
      groupName: 'User management'
      groupDescription: |-

        APIs for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Index Users'
      description: 'This endpoint will list all users'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      include_trashed:
        name: include_trashed
        description: 'Include trashed users.'
        required: false
        example: false
        type: boolean
        custom: []
    cleanQueryParameters:
      include_trashed: false
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": [
                {
                    "id": 1,
                    "name": "Irma Cronin",
                    "email": "conor.williamson@example.org",
                    "phone_no": "1-931-312-0031",
                    "deleted_at": null
                },
                {
                    "id": 2,
                    "name": "Clifton Sanford MD",
                    "email": "orrin32@example.com",
                    "phone_no": "(541) 520-3759",
                    "deleted_at": null
                },
                {
                    "id": 3,
                    "name": "Dr. Earnestine Pacocha",
                    "email": "llewellyn32@example.net",
                    "phone_no": "1-682-751-0553",
                    "deleted_at": null
                },
                {
                    "id": 4,
                    "name": "Vernie Roberts",
                    "email": "schuster.blake@example.org",
                    "phone_no": "+1-228-783-6278",
                    "deleted_at": null
                },
                {
                    "id": 5,
                    "name": "Rylan Heaney I",
                    "email": "ckonopelski@example.net",
                    "phone_no": "(973) 586-8948",
                    "deleted_at": null
                },
                {
                    "id": 6,
                    "name": "Isabell Pagac",
                    "email": "frederic.kuhn@example.net",
                    "phone_no": "(508) 754-0538",
                    "deleted_at": null
                },
                {
                    "id": 7,
                    "name": "Mr. Bud D'Amore",
                    "email": "daija.corkery@example.org",
                    "phone_no": "(270) 303-9172",
                    "deleted_at": null
                },
                {
                    "id": 8,
                    "name": "Dr. Lloyd Cassin",
                    "email": "raven85@example.org",
                    "phone_no": "1-220-300-6490",
                    "deleted_at": null
                },
                {
                    "id": 9,
                    "name": "Dr. Natalie Collier III",
                    "email": "odaniel@example.net",
                    "phone_no": "(986) 979-0901",
                    "deleted_at": null
                },
                {
                    "id": 10,
                    "name": "Prof. Darron Bechtelar",
                    "email": "randall.macejkovic@example.com",
                    "phone_no": "+13604221010",
                    "deleted_at": null
                }
            ],
            "links": {
                "first": "http://movie-api.test/api/users?page=1",
                "last": "http://movie-api.test/api/users?page=1",
                "prev": null,
                "next": null
            },
            "meta": {
                "current_page": 1,
                "from": 1,
                "last_page": 1,
                "links": [
                    {
                        "url": null,
                        "label": "&laquo; Previous",
                        "active": false
                    },
                    {
                        "url": "http://movie-api.test/api/users?page=1",
                        "label": "1",
                        "active": true
                    },
                    {
                        "url": null,
                        "label": "Next &raquo;",
                        "active": false
                    }
                ],
                "path": "http://movie-api.test/api/users",
                "per_page": 15,
                "to": 10,
                "total": 10
            }
          }
        headers: []
        description: Success
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/users
    metadata:
      groupName: 'User management'
      groupDescription: |-

        APIs for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Store User'
      description: 'This endpoint will create a new user'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the user. Must not be greater than 255 characters.'
        required: true
        example: 'John Doe'
        type: string
        custom: []
      email:
        name: email
        description: 'The email of the user. Must be a valid email address.'
        required: true
        example: johndoe@example.com
        type: string
        custom: []
      phone_no:
        name: phone_no
        description: 'The phone number of the user.'
        required: true
        example: '09 123 456 789'
        type: string
        custom: []
      category_ids:
        name: category_ids
        description: 'IDs of User favourite categories.'
        required: true
        example:
          - 1.0
        type: 'number[]'
        custom: []
      tag_ids:
        name: tag_ids
        description: 'IDs of User favourite tags.'
        required: true
        example:
          - 1.0
        type: 'number[]'
        custom: []
      movie_ids:
        name: movie_ids
        description: 'IDs of User favourite movies.'
        required: true
        example:
          - 1.0
        type: 'number[]'
        custom: []
    cleanBodyParameters:
      name: 'John Doe'
      email: johndoe@example.com
      phone_no: '09 123 456 789'
      category_ids:
        - 1.0
      tag_ids:
        - 1.0
      movie_ids:
        - 1.0
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "status": "success",
            "message": "User successfully created"
          }
        headers: []
        description: Success
        custom: []
      -
        status: 400
        content: |
          {
            "message": "The example_field1 is required. (and 2 more errors)",
            "errors": {
                "example_field1": ["The example_field1 field is required."],
                "example_field2": ["The example_field2 field must be numeric."],
                "example_field3": ["The example_field3 field must be a date."]
            }
          }
        headers: []
        description: 'Validation Error'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{id}'
    metadata:
      groupName: 'User management'
      groupDescription: |-

        APIs for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Show user'
      description: 'This endpoint will show the details of the user including favourite movies, categories and tags'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 16
        type: integer
        custom: []
    cleanUrlParameters:
      id: 16
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": "success",
            "message": "User successfully retrieved",
            "data": {
                "id": 3,
                "name": "Dr. Earnestine Pacocha",
                "email": "llewellyn32@example.net",
                "phone_no": "1-682-751-0553",
                "favourite_tags": [
                    {
                        "id": 1,
                        "name": "Thrilling",
                        "deleted_at": null
                    },
                    {
                        "id": 6,
                        "name": "Epic",
                        "deleted_at": null
                    },
                    {
                        "id": 10,
                        "name": "Psychological",
                        "deleted_at": null
                    }
                ],
                "favourite_categories": [
                    {
                        "id": 1,
                        "name": "Action",
                        "deleted_at": null
                    },
                    {
                        "id": 6,
                        "name": "Crime",
                        "deleted_at": null
                    },
                    {
                        "id": 10,
                        "name": "Horror",
                        "deleted_at": null
                    }
                ],
                "favourite_movies": [
                    {
                        "slug": "titanic",
                        "title": "Titanic",
                        "description": "A seventeen-year-old aristocrat falls in love with a kind but poor artist aboard the luxurious, ill-fated R.M.S. Titanic.",
                        "released_date": null,
                        "available_until": "2023-06-30T23:59:59.000000Z",
                        "length_in_seconds": 11640,
                        "deleted_at": null
                    },
                    {
                        "slug": "star-wars-episode-v-the-empire-strikes-back",
                        "title": "Star Wars: Episode V - The Empire Strikes Back",
                        "description": "After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda, while his friends are pursued by Darth Vader and a bounty hunter named Boba Fett all over the galaxy.",
                        "released_date": null,
                        "available_until": "2023-06-30T23:59:59.000000Z",
                        "length_in_seconds": 7440,
                        "deleted_at": null
                    }
                ],
                "deleted_at": null
            }
          }
        headers: []
        description: Success
        custom: []
      -
        status: 404
        content: |
          {
            "message": "No query results for model [App\\Models\\ModelName] 1"
          }
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/users/{id}'
    metadata:
      groupName: 'User management'
      groupDescription: |-

        APIs for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Update User'
      description: 'This endpoint will update a User'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 4
        type: integer
        custom: []
    cleanUrlParameters:
      id: 4
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the user. Must not be greater than 255 characters.'
        required: true
        example: 'John Doe'
        type: string
        custom: []
      email:
        name: email
        description: 'The email of the user. Must be a valid email address.'
        required: true
        example: johndoe@example.com
        type: string
        custom: []
      phone_no:
        name: phone_no
        description: 'The phone number of the user.'
        required: true
        example: '09 123 456 789'
        type: string
        custom: []
      category_ids:
        name: category_ids
        description: 'IDs of User favourite categories.'
        required: true
        example:
          - 1.0
        type: 'number[]'
        custom: []
      tag_ids:
        name: tag_ids
        description: 'IDs of User favourite tags.'
        required: true
        example:
          - 1.0
        type: 'number[]'
        custom: []
      movie_ids:
        name: movie_ids
        description: 'IDs of User favourite movies.'
        required: true
        example:
          - 1.0
        type: 'number[]'
        custom: []
    cleanBodyParameters:
      name: 'John Doe'
      email: johndoe@example.com
      phone_no: '09 123 456 789'
      category_ids:
        - 1.0
      tag_ids:
        - 1.0
      movie_ids:
        - 1.0
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": "success",
            "message": "User successfully updated"
          }
        headers: []
        description: Success
        custom: []
      -
        status: 400
        content: |
          {
            "message": "The example_field1 is required. (and 2 more errors)",
            "errors": {
                "example_field1": ["The example_field1 field is required."],
                "example_field2": ["The example_field2 field must be numeric."],
                "example_field3": ["The example_field3 field must be a date."]
            }
          }
        headers: []
        description: 'Validation Error'
        custom: []
      -
        status: 404
        content: |
          {
            "message": "No query results for model [App\\Models\\ModelName] 1"
          }
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/users/{id}'
    metadata:
      groupName: 'User management'
      groupDescription: |-

        APIs for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete user'
      description: 'This endpoint will delete a user'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": "success",
            "message": "User successfully trashed"
          }
        headers: []
        description: Success
        custom: []
      -
        status: 404
        content: |
          {
            "message": "No query results for model [App\\Models\\ModelName] 1"
          }
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
