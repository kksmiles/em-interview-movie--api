## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Tag management'
description: |-

  APIs for managing tags
endpoints:
  -
    httpMethods:
      - POST
    uri: 'api/tags/{id}/forceDestroy'
    metadata:
      groupName: 'Tag management'
      groupDescription: |-

        APIs for managing tags
      subgroup: ''
      subgroupDescription: ''
      title: 'Force Destroy tag'
      description: 'This endpoint will permanently delete a tag'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the tag.'
        required: true
        example: magnam
        type: string
        custom: []
    cleanUrlParameters:
      id: magnam
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": "success",
            "message": "Tag successfully deleted"
          }
        headers: []
        description: Success
        custom: []
      -
        status: 404
        content: |
          {
            "message": "No query results for model [App\\Models\\ModelName] 1"
          }
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/tags/{id}/restore'
    metadata:
      groupName: 'Tag management'
      groupDescription: |-

        APIs for managing tags
      subgroup: ''
      subgroupDescription: ''
      title: 'Restore tag'
      description: 'This endpoint will restore a tag'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the tag.'
        required: true
        example: iste
        type: string
        custom: []
    cleanUrlParameters:
      id: iste
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": "success",
            "message": "Tag successfully restored"
          }
        headers: []
        description: Success
        custom: []
      -
        status: 404
        content: |
          {
            "message": "No query results for model [App\\Models\\ModelName] 1"
          }
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/tags
    metadata:
      groupName: 'Tag management'
      groupDescription: |-

        APIs for managing tags
      subgroup: ''
      subgroupDescription: ''
      title: 'Index Tags'
      description: 'This endpoint will list all tags'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      include_trashed:
        name: include_trashed
        description: 'Include trashed users.'
        required: false
        example: false
        type: boolean
        custom: []
    cleanQueryParameters:
      include_trashed: false
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": [
                {
                    "id": 1,
                    "name": "Thrilling",
                    "deleted_at": null
                },
                {
                    "id": 2,
                    "name": "Rom-com",
                    "deleted_at": null
                },
                {
                    "id": 3,
                    "name": "Sci-fi",
                    "deleted_at": null
                },
                {
                    "id": 4,
                    "name": "Historical",
                    "deleted_at": null
                },
                {
                    "id": 5,
                    "name": "Psychological",
                    "deleted_at": null
                },
                {
                    "id": 6,
                    "name": "Epic",
                    "deleted_at": null
                },
                {
                    "id": 7,
                    "name": "Horror",
                    "deleted_at": null
                },
                {
                    "id": 8,
                    "name": "Inspirational",
                    "deleted_at": null
                },
                {
                    "id": 9,
                    "name": "Satire",
                    "deleted_at": null
                },
                {
                    "id": 10,
                    "name": "Psychological",
                    "deleted_at": null
                }
            ],
            "links": {
                "first": "http://movie-api.test/api/tags?page=1",
                "last": "http://movie-api.test/api/tags?page=1",
                "prev": null,
                "next": null
            },
            "meta": {
                "current_page": 1,
                "from": 1,
                "last_page": 1,
                "links": [
                    {
                        "url": null,
                        "label": "&laquo; Previous",
                        "active": false
                    },
                    {
                        "url": "http://movie-api.test/api/tags?page=1",
                        "label": "1",
                        "active": true
                    },
                    {
                        "url": null,
                        "label": "Next &raquo;",
                        "active": false
                    }
                ],
                "path": "http://movie-api.test/api/tags",
                "per_page": 15,
                "to": 10,
                "total": 10
            }
          }
        headers: []
        description: Success
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/tags
    metadata:
      groupName: 'Tag management'
      groupDescription: |-

        APIs for managing tags
      subgroup: ''
      subgroupDescription: ''
      title: 'Store Tag'
      description: 'This endpoint will create a new tag'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the tag. Must not be greater than 255 characters.'
        required: true
        example: 'My Tag'
        type: string
        custom: []
    cleanBodyParameters:
      name: 'My Tag'
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "status": "success",
            "message": "Tag successfully created"
          }
        headers: []
        description: Success
        custom: []
      -
        status: 400
        content: |
          {
            "message": "The example_field1 is required. (and 2 more errors)",
            "errors": {
                "example_field1": ["The example_field1 field is required."],
                "example_field2": ["The example_field2 field must be numeric."],
                "example_field3": ["The example_field3 field must be a date."]
            }
          }
        headers: []
        description: 'Validation Error'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/tags/{id}'
    metadata:
      groupName: 'Tag management'
      groupDescription: |-

        APIs for managing tags
      subgroup: ''
      subgroupDescription: ''
      title: 'Show tag'
      description: 'This endpoint will show the details of the tag including favourite movies, categories and tags'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the tag.'
        required: true
        example: 17
        type: integer
        custom: []
    cleanUrlParameters:
      id: 17
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": "success",
            "message": "Tag successfully retrieved",
            "data": {
                "id": 5,
                "name": "Psychological",
                "movies": [
                    {
                        "slug": "the-dark-knight",
                        "title": "The Dark Knight",
                        "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
                        "released_date": null,
                        "available_until": "2023-06-30T23:59:59.000000Z",
                        "length_in_seconds": 9120,
                        "deleted_at": null
                    }
                ],
                "deleted_at": null
            }
          }
        headers: []
        description: Success
        custom: []
      -
        status: 404
        content: |
          {
            "message": "No query results for model [App\\Models\\ModelName] 1"
          }
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/tags/{id}'
    metadata:
      groupName: 'Tag management'
      groupDescription: |-

        APIs for managing tags
      subgroup: ''
      subgroupDescription: ''
      title: 'Update Tag'
      description: 'This endpoint will update a Tag'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the tag.'
        required: true
        example: 14
        type: integer
        custom: []
    cleanUrlParameters:
      id: 14
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the tag. Must not be greater than 255 characters.'
        required: true
        example: 'My Tag'
        type: string
        custom: []
    cleanBodyParameters:
      name: 'My Tag'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": "success",
            "message": "Tag successfully updated"
          }
        headers: []
        description: Success
        custom: []
      -
        status: 400
        content: |
          {
            "message": "The example_field1 is required. (and 2 more errors)",
            "errors": {
                "example_field1": ["The example_field1 field is required."],
                "example_field2": ["The example_field2 field must be numeric."],
                "example_field3": ["The example_field3 field must be a date."]
            }
          }
        headers: []
        description: 'Validation Error'
        custom: []
      -
        status: 404
        content: |
          {
            "message": "No query results for model [App\\Models\\ModelName] 1"
          }
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/tags/{id}'
    metadata:
      groupName: 'Tag management'
      groupDescription: |-

        APIs for managing tags
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete tag'
      description: 'This endpoint will delete a tag'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the tag.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": "success",
            "message": "Tag successfully trashed"
          }
        headers: []
        description: Success
        custom: []
      -
        status: 404
        content: |
          {
            "message": "No query results for model [App\\Models\\ModelName] 1"
          }
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
